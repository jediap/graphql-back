<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.2.6.RELEASE</version> <!-- lookup parent from repository -->
	</parent>

	<groupId>com.idrica.goaigua</groupId>
	<artifactId>graphql-back</artifactId>
	<version>0.1.0-SNAPSHOT</version>
	<name>graphql-back</name>
	<packaging>jar</packaging>
	<description>Basic microservice project template</description>

	<properties>
		<base-package>com.idrica.goaigua.microservicetemplate</base-package>
		<start-class>${base-package}.Application</start-class>

		<sonar.exclusions>**/*Application*, **/model/**</sonar.exclusions>

		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

		<contact-email>aguasdevalencia@globalomnium.com</contact-email>
		<license-name>property of Global Omnium Idrica</license-name>

		<java.version>1.8</java.version>
		<spring-cloud.version>Hoxton.RELEASE</spring-cloud.version>

		<cucumber.jvm.version>4.2.6</cucumber.jvm.version>
		<prometheus.version>0.6.0</prometheus.version>
		<logstash.version>6.3</logstash.version>
		<cucumber-html.version>0.2.7</cucumber-html.version>
		<swagger-core.version>1.6.1</swagger-core.version>
		<springfox-swagger.version>2.9.2</springfox-swagger.version>
		<postgresql.version>42.2.5</postgresql.version>

		<jsonwebtoken.version>0.9.1</jsonwebtoken.version>

		<dockerfile-maven-plugin.version>1.4.13</dockerfile-maven-plugin.version>
		<docker-maven-plugin.version>0.4.13</docker-maven-plugin.version>


		<docker.registry>nexus-docker.dev.idrica.pro</docker.registry>
		<docker.org>${project.groupId}</docker.org>
		<docker.image>${project.artifactId}</docker.image>
		<docker.deploy.tag>${project.version}</docker.deploy.tag>
		<docker.build.directory>${project.build.directory}/docker</docker.build.directory>
		<docker.image.src.root>src/main/docker/</docker.image.src.root>

		<dockerfile.build.noCache>true</dockerfile.build.noCache>
		<dockerfile.build.pullNewerImage>true</dockerfile.build.pullNewerImage>

		<timestamp>${maven.build.timestamp}</timestamp>
		<maven.build.timestamp.format>yyyy-MM-dd HH:mm</maven.build.timestamp.format>
		<maven.buildNumber.timestamp.format>${maven.build.timestamp.format}</maven.buildNumber.timestamp.format>

		<graphql-java>5.0.2</graphql-java>
		<graphql-java-tools.version>5.2.4</graphql-java-tools.version>
	</properties>

	<profiles>
		<profile>
			<id>docker_master</id>
			<properties>
				<docker.registry>nexus-docker.dev.idrica.pro</docker.registry>
			</properties>
		</profile>
		<profile>
			<id>docker_snapshot</id>
			<properties>
				<docker.registry>nexus-dockersnap.dev.idrica.pro</docker.registry>
			</properties>
		</profile>
	</profiles>

	<dependencies>

		<!--<dependency> -->
		<!--<groupId>org.springframework.boot</groupId> -->
		<!--<artifactId>spring-boot-properties-migrator</artifactId> -->
		<!--<scope>runtime</scope> -->
		<!--</dependency> -->


		<!--Spring Framework -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<!--><dependency>
			<groupId>com.graphql-java</groupId>
			<artifactId>graphiql-spring-boot-starter</artifactId>
			<version>${graphql-java}</version>
		</dependency>-->
		<!--  GraphQL -->
		<dependency>
			<groupId>com.graphql-java</groupId>
			<artifactId>graphql-java</artifactId>
			<version>3.0.0</version>
		</dependency>
		<dependency>
			<groupId>com.graphql-java</groupId>
			<artifactId>graphql-java-tools</artifactId>
			<version>3.2.0</version>
		</dependency>
		<dependency>
			<groupId>com.graphql-java</groupId>
			<artifactId>graphql-java-servlet</artifactId>
			<version>4.0.0</version>
		</dependency>

		<!--Discovery -->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
		</dependency>

		<!-- Circuit breaker -->
		<dependency>
			<groupId>io.github.resilience4j</groupId>
			<artifactId>resilience4j-micrometer</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-circuitbreaker-resilience4j</artifactId>
		</dependency>

		<!-- Spring cloud config -->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-config</artifactId>
		</dependency>

		<!-- Zipkin and Sleuth - Distributed Tracing -->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-sleuth</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-zipkin</artifactId>
		</dependency>

		<!-- Logging -->
		<dependency>
			<groupId>net.logstash.logback</groupId>
			<artifactId>logstash-logback-encoder</artifactId>
			<version>${logstash.version}</version>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-core</artifactId>
		</dependency>

		<!-- Testing -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
		</dependency>

		<!--Cucumber -->
		<dependency>
			<groupId>io.cucumber</groupId>
			<artifactId>cucumber-core</artifactId>
			<version>${cucumber.jvm.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>io.cucumber</groupId>
			<artifactId>cucumber-java</artifactId>
			<version>${cucumber.jvm.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>io.cucumber</groupId>
			<artifactId>cucumber-junit</artifactId>
			<version>${cucumber.jvm.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>io.cucumber</groupId>
			<artifactId>cucumber-html</artifactId>
			<version>${cucumber-html.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>io.cucumber</groupId>
			<artifactId>cucumber-spring</artifactId>
			<version>${cucumber.jvm.version}</version>
			<scope>test</scope>
		</dependency>

		<!--Swagger -->
		<dependency>
			<groupId>io.swagger</groupId>
			<artifactId>swagger-core</artifactId>
			<scope>compile</scope>
			<version>${swagger-core.version}</version>
		</dependency>

		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger2</artifactId>
			<version>${springfox-swagger.version}</version>
		</dependency>

		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger-ui</artifactId>
			<version>${springfox-swagger.version}</version>
		</dependency>

		<!--Bases de datos -->
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<version>${postgresql.version}</version><!--$NO-MVN-MAN-VER$ -->
		</dependency>

		<!-- prometheus -->
		<dependency>
			<groupId>io.prometheus</groupId>
			<artifactId>simpleclient_spring_boot</artifactId>
			<version>${prometheus.version}</version>
		</dependency>
		<dependency>
			<groupId>io.prometheus</groupId>
			<artifactId>simpleclient_hotspot</artifactId>
			<version>${prometheus.version}</version>
		</dependency>
		<dependency>
			<groupId>io.prometheus</groupId>
			<artifactId>simpleclient_servlet</artifactId>
			<version>${prometheus.version}</version>
		</dependency>

		<!-- Micormeter core dependecy -->
		<dependency>
			<groupId>io.micrometer</groupId>
			<artifactId>micrometer-core</artifactId>
		</dependency>
		<!-- Micrometer Prometheus registry -->
		<dependency>
			<groupId>io.micrometer</groupId>
			<artifactId>micrometer-registry-prometheus</artifactId>
		</dependency>

		<!--Otros -->
		<dependency>
			<groupId>com.google.code.gson</groupId>
			<artifactId>gson</artifactId>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>commons-codec</groupId>
			<artifactId>commons-codec</artifactId>
		</dependency>
		<dependency>
			<groupId>org.flywaydb</groupId>
			<artifactId>flyway-core</artifactId>
		</dependency>

		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt</artifactId>
			<version>${jsonwebtoken.version}</version>
		</dependency>

	</dependencies>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<!-- build -->
	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<!-- Copy the directory containing static content to build directory. -->
			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<executions>
					<execution>
						<id>copy-resources</id>
						<phase>package</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${docker.build.directory}</outputDirectory>
							<resources>
								<resource>
									<directory>${docker.image.src.root}</directory>
									<filtering>false</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>

			</plugin>
			<!-- Copy the JAR file containing the Spring Boot application to the application/lib 
				directory. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<id>copy</id>
						<phase>package</phase>
						<goals>
							<goal>copy</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<artifactItems>
						<artifactItem>
							<!-- Specify groupId, artifactId, version and type for the artifact 
								you want to package in the Docker image. In the case of a Spring Boot application, 
								these are the same as the project group id, artifact id and version. -->
							<groupId>${project.groupId}</groupId>
							<artifactId>${project.artifactId}</artifactId>
							<version>${project.version}</version>
							<type>jar</type>
							<overWrite>true</overWrite>
							<outputDirectory>${docker.build.directory}/application/lib</outputDirectory>
							<!-- Specify the destination name as to have one and the same name 
								to refer to in the Docker file. -->
							<destFileName>springboot-webapp.jar</destFileName>
						</artifactItem>
						<!-- Add additional artifacts to be packaged in the Docker image here. -->

					</artifactItems>
					<outputDirectory>${docker.build.directory}</outputDirectory>
					<overWriteReleases>true</overWriteReleases>
					<overWriteSnapshots>true</overWriteSnapshots>
				</configuration>
			</plugin>

			<!-- Remove any existing Docker image with the image name and image tag 
				(project version) configured in the properties. -->
			<plugin>
				<groupId>com.spotify</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>${docker-maven-plugin.version}</version>
				<configuration>
					<imageName>${docker.registry}/${docker.image}</imageName>
					<dockerDirectory>${project.build.directory}/docker</dockerDirectory>
					<imageTags>
						<imageTag>${project.version}</imageTag>
						<imageTag>latest</imageTag>
					</imageTags>
					<verbose>true</verbose>
				</configuration>
			</plugin>

			<!-- Build the Docker image. -->
			<plugin>
				<groupId>com.spotify</groupId>
				<artifactId>dockerfile-maven-plugin</artifactId>
				<version>${dockerfile-maven-plugin.version}</version>
				<executions>
					<execution>
						<id>default</id>
						<goals>
							<goal>build</goal>
						</goals>
					</execution>
					<execution>
						<id>tag-latest</id>
						<goals>
							<goal>tag</goal>
							<goal>push</goal>
						</goals>
						<configuration>
							<tag>latest</tag>
						</configuration>
					</execution>
					<execution>
						<id>tag-version</id>
						<goals>
							<goal>tag</goal>
						</goals>
						<configuration>
							<tag>${project.version}</tag>
						</configuration>
					</execution>
				</executions>
				<configuration>
					<useMavenSettingsForAuth>true</useMavenSettingsForAuth>
					<contextDirectory>${project.build.directory}/docker</contextDirectory>
					<writeTestMetadata>false</writeTestMetadata>
					<dockerInfoDirectory></dockerInfoDirectory>
					<verbose>true</verbose>
					<forceCreation>true</forceCreation>
					<imageName>${docker.image}</imageName>
					<repository>${docker.registry}/${docker.image}</repository>
					<tag>${project.version}</tag>
					<forceTags>true</forceTags>
					<pullNewerImage>false</pullNewerImage>
					<imageTags>
						<imageTag>${project.version}</imageTag>
						<imageTag>latest</imageTag>
					</imageTags>
					<buildArgs>
						<JAR_FILE>${project.build.finalName}.jar</JAR_FILE>
					</buildArgs>
					<dockerDirectory>${project.build.directory}/docker</dockerDirectory>
				</configuration>
			</plugin>

		</plugins>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
			</resource>
		</resources>
	</build>


</project>
